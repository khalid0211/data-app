import streamlit as st
from firebase_utils import get_all_books, add_book, delete_book, update_book
from datetime import datetime

st.set_page_config(layout="wide")

st.title("ðŸ“š Simple Library System")

# --- MENU ---
menu = ["Add Book", "View All Books", "Edit/Delete Book"]
choice = st.sidebar.selectbox("Menu", menu)

if choice == "Add Book":
    st.subheader("Add a New Book")

    with st.form(key="add_book_form", clear_on_submit=True):
        title = st.text_input("Title")
        authors = st.text_input("Author(s) (comma-separated)")
        publisher = st.text_input("Publisher")
        edition = st.text_input("Edition")
        publish_date = st.date_input("Publish Date", value=datetime.now())
        
        submit_button = st.form_submit_button(label="Add Book")

        if submit_button:
            if title and authors:
                # Convert authors string to a list
                authors_list = [author.strip() for author in authors.split(',')]
                # Convert date to a string format for Firestore
                publish_date_str = publish_date.strftime("%Y-%m-%d")
                
                if add_book(title, authors_list, publisher, edition, publish_date_str):
                    st.success("Book added successfully!")
                else:
                    st.error("Failed to add book.")
            else:
                st.warning("Title and Author(s) are required.")


elif choice == "View All Books":
    st.subheader("All Books in the Library")
    books = get_all_books()

    if books:
        for i, book in enumerate(books):
            with st.expander(f"{book.get('title', 'No Title')} by {', '.join(book.get('authors', ['N/A']))}"):
                st.write(f"**Publisher:** {book.get('publisher', 'N/A')}")
                st.write(f"**Edition:** {book.get('edition', 'N/A')}")
                st.write(f"**Publish Date:** {book.get('publish_date', 'N/A')}")
                st.write(f"**Document ID:** {book.get('id', 'N/A')}")
    else:
        st.info("No books found in the library.")


elif choice == "Edit/Delete Book":
    st.subheader("Edit or Delete a Book")
    books = get_all_books()
    
    if books:
        book_titles = [f"{book.get('title')} ({book.get('id')})" for book in books]
        selected_book_title = st.selectbox("Select a book to edit or delete", book_titles)

        # Find the selected book's full data
        selected_book = None
        if selected_book_title:
            selected_id = selected_book_title.split('(')[-1][:-1]
            for book in books:
                if book['id'] == selected_id:
                    selected_book = book
                    break
        
        if selected_book:
            st.write("---")
            
            with st.form(key="edit_form"):
                new_title = st.text_input("Title", value=selected_book.get('title', ''))
                new_authors = st.text_input("Author(s) (comma-separated)", value=", ".join(selected_book.get('authors', [])))
                new_publisher = st.text_input("Publisher", value=selected_book.get('publisher', ''))
                new_edition = st.text_input("Edition", value=selected_book.get('edition', ''))
                
                # Handle date conversion
                current_date_str = selected_book.get('publish_date')
                if current_date_str:
                    current_date = datetime.strptime(current_date_str, "%Y-%m-%d").date()
                else:
                    current_date = datetime.now().date()
                new_publish_date = st.date_input("Publish Date", value=current_date)

                col1, col2 = st.columns([1, 5])
                with col1:
                    update_button = st.form_submit_button("Update")
                with col2:
                    delete_button = st.form_submit_button("Delete")

            if update_button:
                updated_data = {
                    'title': new_title,
                    'authors': [author.strip() for author in new_authors.split(',')],
                    'publisher': new_publisher,
                    'edition': new_edition,
                    'publish_date': new_publish_date.strftime("%Y-%m-%d")
                }
                if update_book(selected_book['id'], updated_data):
                    st.success("Book updated successfully! Refresh to see changes.")
                    st.rerun()
                else:
                    st.error("Failed to update book.")

            if delete_button:
                if delete_book(selected_book['id']):
                    st.success("Book deleted successfully! Refresh to see changes.")
                    st.rerun()
                else:
                    st.error("Failed to delete book.")
    else:
        st.info("No books available to edit or delete.")