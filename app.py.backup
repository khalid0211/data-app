import streamlit as st
import pandas as pd
from datetime import datetime
from utils.firebase_utils import (add_book, edit_book, delete_book, get_books,
                                  add_bookshelf, edit_bookshelf, delete_bookshelf, get_bookshelves,
                                  generate_tracking_number)
from utils.book_api import search_book_by_title

# Page configuration
st.set_page_config(
    page_title="Library Management System",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stButton>button {
        width: 100%;
        border-radius: 5px;
        height: 3em;
        font-weight: 600;
    }
    .success-message {
        padding: 1rem;
        border-radius: 5px;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    div[data-testid="stExpander"] {
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        margin-bottom: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)

def initialize_session_state():
    """Initialize session state variables"""
    if 'last_action' not in st.session_state:
        st.session_state.last_action = None
    if 'show_success' not in st.session_state:
        st.session_state.show_success = False

def display_book_stats(books):
    """Display book statistics in metrics"""
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total Books", len(books))

    with col2:
        unique_authors = set()
        for book in books:
            if isinstance(book.get('authors'), list):
                unique_authors.update(book['authors'])
            elif book.get('authors'):
                unique_authors.add(book['authors'])
        st.metric("Unique Authors", len(unique_authors))

    with col3:
        unique_publishers = len(set(book.get('publisher', 'Unknown') for book in books))
        st.metric("Publishers", unique_publishers)

    with col4:
        current_year = datetime.now().year
        recent_books = sum(1 for book in books
                          if book.get('publish_date') and
                          book['publish_date'].startswith(str(current_year)))
        st.metric(f"{current_year} Releases", recent_books)

def add_book_page():
    """Add book page with improved UI"""
    st.markdown("<h2>üìñ Add New Book</h2>", unsafe_allow_html=True)

    # Initialize session state for form fields
    if 'book_data' not in st.session_state:
        st.session_state.book_data = {
            'title': '',
            'authors': '',
            'publisher': '',
            'edition': '',
            'publish_date': datetime.now(),
            'page_count': '',
            'isbn': '',
            'preview_url': '',
            'bookshelf_id': ''
        }

    # Title input with search button (outside form)
    col_title, col_search = st.columns([3, 1])

    with col_title:
        title_input = st.text_input("Title*",
                                    value=st.session_state.book_data['title'],
                                    placeholder="Enter book title",
                                    key="title_input")

    with col_search:
        st.write("")  # Spacer for alignment
        st.write("")  # Spacer for alignment
        search_button = st.button("üîç Search", use_container_width=True, type="secondary")

    # Handle search button click
    if search_button:
        if not title_input or not title_input.strip():
            st.warning("‚ö†Ô∏è Please enter a book title to search.")
        else:
            with st.spinner("Searching for book information..."):
                book_info = search_book_by_title(title_input)

                if book_info:
                    st.success("‚úÖ Book information found! Fields populated below.")
                    st.session_state.book_data['title'] = book_info.get('title', '')
                    st.session_state.book_data['authors'] = book_info.get('authors', '')
                    st.session_state.book_data['publisher'] = book_info.get('publisher', '')
                    st.session_state.book_data['page_count'] = str(book_info.get('page_count', ''))
                    st.session_state.book_data['isbn'] = book_info.get('isbn', '')
                    st.session_state.book_data['preview_url'] = book_info.get('preview_url', '')

                    # Parse publish date
                    if book_info.get('published_date'):
                        try:
                            st.session_state.book_data['publish_date'] = datetime.strptime(
                                book_info['published_date'], '%Y-%m-%d'
                            ).date()
                        except:
                            st.session_state.book_data['publish_date'] = datetime.now().date()

                    # Show additional info in expander
                    with st.expander("üìã Additional Information Found"):
                        if book_info.get('description'):
                            st.write(f"**Description:** {book_info['description'][:300]}...")
                        if book_info.get('isbn'):
                            st.write(f"**ISBN:** {book_info['isbn']}")
                        if book_info.get('page_count'):
                            st.write(f"**Pages:** {book_info['page_count']}")
                        if book_info.get('categories'):
                            st.write(f"**Categories:** {book_info['categories']}")

                    st.rerun()
                else:
                    st.warning("‚ö†Ô∏è No information found for this title. Please enter the details manually.")

    st.markdown("---")

    # Rest of the form
    with st.form("add_book_form", clear_on_submit=True):
        col1, col2 = st.columns(2)

        with col1:
            title = st.text_input("Title (confirm)*",
                                 value=st.session_state.book_data['title'],
                                 placeholder="Confirm book title")
            authors = st.text_input("Author(s)*",
                                   value=st.session_state.book_data['authors'],
                                   placeholder="Comma-separated authors")
            publisher = st.text_input("Publisher",
                                     value=st.session_state.book_data['publisher'],
                                     placeholder="Enter publisher name")
            isbn = st.text_input("ISBN",
                                value=st.session_state.book_data['isbn'],
                                placeholder="ISBN number")

        with col2:
            edition = st.text_input("Edition",
                                   value=st.session_state.book_data['edition'],
                                   placeholder="e.g., 1st, 2nd, Revised")
            page_count = st.text_input("Pages",
                                      value=st.session_state.book_data['page_count'],
                                      placeholder="Number of pages")
            publish_date = st.date_input("Publish Date",
                                        value=st.session_state.book_data['publish_date'],
                                        max_value=datetime.now())

        # Get bookshelves for dropdown
        bookshelves = get_bookshelves()
        shelf_options = [''] + [f"{shelf.get('shelf_id')} - {shelf.get('title')}" for shelf in bookshelves]
        bookshelf = st.selectbox("Bookshelf Location", shelf_options,
                                index=0 if not st.session_state.book_data['bookshelf_id'] else
                                shelf_options.index(next((opt for opt in shelf_options
                                                         if opt.startswith(f"{st.session_state.book_data['bookshelf_id']} -")), ''))
                                if any(opt.startswith(f"{st.session_state.book_data['bookshelf_id']} -") for opt in shelf_options) else 0)

        preview_url = st.text_input("Google Books Preview URL",
                                   value=st.session_state.book_data['preview_url'],
                                   placeholder="Preview URL (auto-populated from search)")

        # Show generated tracking number
        tracking_num = generate_tracking_number()
        st.info(f"üìã **Tracking Number:** {tracking_num} (will be auto-assigned)")

        st.markdown("**Required fields*")

        col_submit1, col_submit2 = st.columns(2)
        with col_submit1:
            submitted = st.form_submit_button("‚ûï Add Book", use_container_width=True)
        with col_submit2:
            clear_form = st.form_submit_button("üîÑ Clear Form", use_container_width=True)

        if clear_form:
            st.session_state.book_data = {
                'title': '',
                'authors': '',
                'publisher': '',
                'edition': '',
                'publish_date': datetime.now(),
                'page_count': '',
                'isbn': '',
                'preview_url': '',
                'bookshelf_id': ''
            }
            st.rerun()

        if submitted:
            if not title or not title.strip():
                st.error("‚ùå Title is required!")
                return
            if not authors or not authors.strip():
                st.error("‚ùå At least one author is required!")
                return

            try:
                publish_date_str = publish_date.strftime("%Y-%m-%d")

                # Extract bookshelf ID from selection
                selected_shelf_id = ''
                if bookshelf and bookshelf.strip():
                    selected_shelf_id = bookshelf.split(' - ')[0]

                success, tracking_number = add_book(
                    title.strip(), authors.strip(),
                    publisher.strip() if publisher else "",
                    edition.strip() if edition else "",
                    publish_date_str,
                    page_count.strip() if page_count else "",
                    isbn.strip() if isbn else "",
                    preview_url.strip() if preview_url else "",
                    selected_shelf_id
                )

                if success:
                    # Clear session state after successful add
                    st.session_state.book_data = {
                        'title': '',
                        'authors': '',
                    'publisher': '',
                    'edition': '',
                    'publish_date': datetime.now(),
                    'page_count': '',
                    'isbn': '',
                    'preview_url': '',
                    'bookshelf_id': ''
                }

                    st.success(f"‚úÖ Book added successfully! Tracking #: {tracking_number}")
                    st.balloons()
                    st.rerun()
                else:
                    st.error("‚ùå Failed to add book!")
            except Exception as e:
                st.error(f"‚ùå Failed to add book: {str(e)}")

def view_books_page():
    """View books page with improved table display"""
    st.markdown("<h2>üìö Library Collection</h2>", unsafe_allow_html=True)

    books = get_books()

    if not books:
        st.info("üì≠ No books in the library yet. Add your first book!")
        return

    # Display statistics
    display_book_stats(books)

    st.markdown("---")

    # Search and filter
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input("üîç Search books", placeholder="Search by title, author, or publisher")
    with col2:
        view_mode = st.selectbox("View Mode", ["Table", "Cards"])

    # Filter books
    filtered_books = books
    if search_term:
        search_term_lower = search_term.lower()
        filtered_books = [
            book for book in books
            if search_term_lower in book.get('title', '').lower() or
               search_term_lower in str(book.get('authors', '')).lower() or
               search_term_lower in book.get('publisher', '').lower()
        ]

    if not filtered_books:
        st.warning("No books match your search criteria.")
        return

    if view_mode == "Table":
        # Create DataFrame for table view
        df_data = []
        for book in filtered_books:
            authors_str = book.get('authors', 'N/A')
            if isinstance(authors_str, list):
                authors_str = ", ".join(authors_str)

            df_data.append({
                "Title": book.get('title', 'N/A'),
                "Author(s)": authors_str,
                "Publisher": book.get('publisher', 'N/A'),
                "Edition": book.get('edition', 'N/A'),
                "Pages": book.get('page_count', 'N/A'),
                "Publish Date": book.get('publish_date', 'N/A')
            })

        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True, hide_index=True)

    else:  # Cards view
        # Display books in expandable cards
        for book in filtered_books:
            authors_str = book.get('authors', 'N/A')
            if isinstance(authors_str, list):
                authors_str = ", ".join(authors_str)

            with st.expander(f"üìï {book.get('title', 'No Title')}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Author(s):** {authors_str}")
                    st.write(f"**Publisher:** {book.get('publisher', 'N/A')}")
                    st.write(f"**Pages:** {book.get('page_count', 'N/A')}")
                with col2:
                    st.write(f"**Edition:** {book.get('edition', 'N/A')}")
                    st.write(f"**Publish Date:** {book.get('publish_date', 'N/A')}")
                st.caption(f"ID: {book.get('id', 'N/A')}")

def edit_delete_book_page():
    """Edit/Delete book page with improved UI"""
    st.markdown("<h2>‚úèÔ∏è Manage Books</h2>", unsafe_allow_html=True)

    books = get_books()

    if not books:
        st.info("üì≠ No books available to edit or delete.")
        return

    # Book selection
    book_options = [f"{book.get('title', 'Untitled')} - {book.get('authors', 'Unknown')} ({book.get('id', '')})"
                   for book in books]
    selected_option = st.selectbox("Select a book", book_options, key="book_selector")

    if selected_option:
        # Extract book ID from selection
        book_id = selected_option.split('(')[-1].rstrip(')')
        selected_book = next((book for book in books if book.get('id') == book_id), None)

        if selected_book:
            # Create tabs for Edit and Delete
            tab1, tab2 = st.tabs(["‚úèÔ∏è Edit", "üóëÔ∏è Delete"])

            with tab1:
                with st.form("edit_book_form"):
                    col1, col2 = st.columns(2)

                    with col1:
                        new_title = st.text_input("Title", value=selected_book.get('title', ''))

                        authors_val = selected_book.get('authors', '')
                        if isinstance(authors_val, list):
                            authors_val = ", ".join(authors_val)
                        new_authors = st.text_input("Author(s)", value=authors_val)

                        new_publisher = st.text_input("Publisher", value=selected_book.get('publisher', ''))

                    with col2:
                        new_edition = st.text_input("Edition", value=selected_book.get('edition', ''))

                        new_page_count = st.text_input("Pages", value=selected_book.get('page_count', ''))

                        # Parse date
                        date_str = selected_book.get('publish_date', '')
                        try:
                            current_date = datetime.strptime(date_str, "%Y-%m-%d").date() if date_str else datetime.now().date()
                        except:
                            current_date = datetime.now().date()

                        new_publish_date = st.date_input("Publish Date", value=current_date)

                    update_button = st.form_submit_button("üíæ Update Book", use_container_width=True)

                    if update_button:
                        if not new_title or not new_title.strip():
                            st.error("‚ùå Title cannot be empty!")
                            return
                        if not new_authors or not new_authors.strip():
                            st.error("‚ùå At least one author is required!")
                            return

                        try:
                            new_publish_date_str = new_publish_date.strftime("%Y-%m-%d")
                            edit_book(book_id, new_title.strip(), new_authors.strip(),
                                    new_publisher.strip(), new_edition.strip(),
                                    new_publish_date_str,
                                    new_page_count.strip() if new_page_count else "")
                            st.success("‚úÖ Book updated successfully!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Failed to update book: {str(e)}")

            with tab2:
                st.warning("‚ö†Ô∏è This action cannot be undone!")
                st.write(f"**Title:** {selected_book.get('title', 'N/A')}")

                authors_display = selected_book.get('authors', 'N/A')
                if isinstance(authors_display, list):
                    authors_display = ", ".join(authors_display)
                st.write(f"**Author(s):** {authors_display}")

                col1, col2, col3 = st.columns([1, 1, 2])
                with col1:
                    if st.button("üóëÔ∏è Confirm Delete", type="primary", use_container_width=True):
                        try:
                            delete_book(book_id)
                            st.success("‚úÖ Book deleted successfully!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Failed to delete book: {str(e)}")

def main():
    initialize_session_state()

    # Header
    st.markdown('<p class="main-header">üìö Library Management System</p>', unsafe_allow_html=True)

    # Sidebar navigation
    st.sidebar.title("Navigation")
    st.sidebar.markdown("---")

    menu_options = {
        "üìö View Books": "view",
        "‚ûï Add Book": "add",
        "‚úèÔ∏è Manage Books": "manage"
    }

    choice = st.sidebar.radio("Go to", list(menu_options.keys()))

    st.sidebar.markdown("---")
    st.sidebar.info("üí° **Tip:** Use the search feature to quickly find books!")

    # Route to appropriate page
    selected_page = menu_options[choice]

    if selected_page == "add":
        add_book_page()
    elif selected_page == "view":
        view_books_page()
    elif selected_page == "manage":
        edit_delete_book_page()

if __name__ == "__main__":
    main()